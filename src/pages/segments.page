<!-- 
Copyright (c) 2011, salesforce.com, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, 
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.
    * Neither the name of the salesforce.com, Inc. nor the names of its contributors 
    may be used to endorse or promote products derived from this software 
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<apex:page standardController="Campaign" extensions="segmentsController" id="segmentspage">
<script type="text/javascript">
    
     
    function sumIt() {
        var errorColor = "#ff0000";
        var cleanColor = "#000000";
        var elements = document.getElementsByClassName('targetcount');
        var percentElements = document.getElementsByClassName('targetpercent');
        
        var sum = 0;
        for(a=0;a<elements.length;a++){
            sum = eval(sum) + parseInt(elements[a].value);
            
            var calcedPercent = (parseInt(elements[a].value)/{!memberCount})*100;
            percentElements[a].innerHTML = calcedPercent.toFixed(2);
            
            
        }
        document.getElementById('totalCount').innerHTML = sum;
        
        if(eval(sum) != {!memberCount}){
            document.getElementById('totalCount').style.color = errorColor;
             document.getElementById('segmentspage:form:contactssettings:contactssettingsbuttons:createsegments').disabled = true;
        } else {
            document.getElementById('totalCount').style.color = cleanColor;
            document.getElementById('segmentspage:form:contactssettings:contactssettingsbuttons:createsegments').disabled = false;
        }
        
        
        var percentSum = 0;
        if(eval(sum) == {!memberCount}){
        	percentSum = 100;
        } else {
        	percentElements = document.getElementsByClassName('targetpercent');
	        for(a=0;a<percentElements.length;a++){
	        
	            percentSum = eval(percentSum) + parseInt(percentElements[a].innerHTML);
	            
	        }
        }
        
        document.getElementById('totalPercent').innerHTML = percentSum;
        
        if(eval(percentSum) != 100){
            document.getElementById('totalPercent').style.color = errorColor;
            document.getElementById('percentSymbol').style.color = errorColor;            
        } else {
            document.getElementById('totalPercent').style.color = cleanColor;
            document.getElementById('percentSymbol').style.color = cleanColor;
        }
        
        
    }
     
    
</script>
<apex:form id="form">   
        <apex:sectionHeader title="Segments" subtitle="Create Segments">
            <description>
                <p>Randomly split the <strong>{!memberCount}</strong> members into segments.</p>
                <apex:outputPanel layout="block" rendered="{!memberCount>MAX_SYNCHRONOUS_MEMBERS}"><p>Because there are more than <strong>{!MAX_SYNCHRONOUS_MEMBERS}</strong> members on this Campaign, the segmentation will not be processed immediately. You will receive an email when the segmentation is complete.</p></apex:outputPanel>
            </description>  
        </apex:sectionHeader>
        
        <apex:pageMessages id="pageMessages"/>
        
        <apex:pageBlock id="contactssettings" title="Contacts Settings">         
            <apex:outputpanel id="segmentpanel">
                <apex:pageBlockSection id="setting" columns="1" rendered="{!showSegmentsPicker}">
                    
                    <apex:pageBlockSectionItem helpText="Select the number of segments you'd like to create.">
                        <apex:outputText value="Number of Segments"/>
                        <apex:inputText value="{!stringSegments}" id="segmententry"/>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
            </apex:outputpanel>
            
            <apex:outputpanel id="segmentspanel">
                <apex:pageBlockSection id="settings" columns="1" rendered="{!showSegmentCreator}">
                
                <apex:dataTable value="{!listOfSegments}" var="segment" id="myTable" cellpadding="3">
                	
                	<apex:column >
                		<apex:facet name="header">Segment Name</apex:facet>

						<apex:facet name="footer"><span style="font-weight:bold;float:right;">Total</span></apex:facet>
			
						<apex:inputText value="{!segment.campaign.name}" size="100"/>
                	</apex:column>
                	
                	
                	<apex:column >
                		<apex:facet name="header">Member Count</apex:facet>

						<apex:facet name="footer"><span id="totalCount">{!memberCount}</span></apex:facet>
			
						<apex:inputText styleclass="targetcount" id="thetargetmembercount" value="{!segment.targetMemberCount}" size="20" onchange="sumIt()"/>
                	</apex:column>
                	
                	
                	<apex:column >
                		<apex:facet name="header">Percentage</apex:facet>

						<apex:facet name="footer"><span id="totalPercent">100</span>%</apex:facet>
			
						<apex:outputText styleclass="targetpercent" id="charCountpercentage" value="{!ROUND((segment.targetMemberCount/memberCount)*100,2)}%"></apex:outputText>
                	</apex:column>
                	
                	
                
                </apex:dataTable>
                
                   <apex:pageBlockSectionItem helpText="By default, all members from the parent campaign are MOVED to the child campaign and the parent will be emptied. Checking this option will keep the original campaign members intact.">
	                    <apex:inputCheckbox value="{!keepOriginal}" id="keepOriginal" />
	                    <apex:outputLabel for="keepOriginal" value="Retain original campaign members in parent campaign."/>   
     				</apex:pageBlockSectionItem>
                </apex:pageBlockSection>
            </apex:outputpanel>
            
            <apex:outputpanel id="batchpanel">
                <apex:pageBlockSection id="batch" columns="1" rendered="{!showBatchInfo}">
                
                Your batch has been queued for processing. An email will be sent to {!batchEmailNotification} on completion.
                </apex:pageBlockSection>
            </apex:outputpanel>
            
            <apex:pageBlockButtons id="contactssettingsbuttons">
                

                <apex:commandButton action="{!resetSegments}" value="Previous" id="backtosegments" rerender="contactssettings,pageMessages" rendered="{!showSegmentCreator}"/>
				<apex:commandButton action="{!setSegments}" value="Next" id="nextsegments" rerender="contactssettings,pageMessages" rendered="{!showSegmentsPicker}"/>
				<apex:commandButton action="{!runSegments}" value="Create Segments" id="createsegments" rerender="contactssettings,pageMessages,batchinfo" rendered="{!showSegmentCreator}"/>
				<apex:commandButton action="/{!parentCampaign.id}" value="Return to Campaign" id="finish" rendered="{!showBatchInfo}"/>
				<apex:commandButton action="{!cancel}" value="Cancel" id="cancel" rendered="{!!showBatchInfo}"/>
            </apex:pageBlockButtons> 
        </apex:pageBlock>
    </apex:form>

</apex:page>